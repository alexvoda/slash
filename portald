#!/usr/bin/perl -w

###############################################################################
# portald  - this is the "daemon" responsible for retrieving portal and site 
# block content
#
# Copyright (C) 1997 Rob "CmdrTaco" Malda
# malda@slashdot.org
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#
#  $Id$
###############################################################################

=head1 Welcome to Portald

portald is the script that sucks down headlines from assorted
places on the internet, and puts them in the boxes for use on
Slashdot.  Exciting?  Nope.

=cut

use strict;
# this needs to be a global here so we can add to it from externally
# called scripts (see portald-site)
use vars qw(%savedBlocks);
use LWP::UserAgent;
use HTTP::Request;
use URI::Escape;
use XML::RSS;

use Slash;
use Slash::DB;
use Slash::Utility;

my $virtual_user = @ARGV ? $ARGV[0] : 'slash';
my ($constants, $slashdb) = createEnvironment($virtual_user);
my $totalChangedStories = 1;

sub makeTmp {
	if (-f "$constants->{logdir}/portald.pid") {
		my $log = `tail -n 3 $constants->{logdir}/portald.log`;
		#sendEmail($siteadmin,'portal - frickin - d',"Portald has failed. You may want to fix it in the near future. Here are the last 3 lines of the log:\n$log");
	} else {
		open LOCK, "> $constants->{logdir}/portald.pid"
			or die "Can't open $constants->{logdir}/portald.pid: $!";
		print LOCK "$$";
		close LOCK;
	}
}

sub deleteTmp {
	unlink "$constants->{logdir}/portald.pid"
		or warn "Can't unlink $constants->{logdir}/portald.pid: $!";
}

################################################################################
sub geturl {
	my $ua = new LWP::UserAgent;
	my $request = new HTTP::Request('GET', $_[0]);
	$ua->proxy(http => $constants->{http_proxy}) if $constants->{http_proxy}; 
	$ua->timeout(30);
	my $result = $ua->request($request);

	if ($result->is_success) {
		return $result->content;
	} else {
		return 0;
	}
}


################################################################################

sub getTop10Comments {
	my $A =	$slashdb->getTop10Comments();

	my $block;
	foreach (@$A) {
		my($sid, $title, $cid, $subj, $d, $nickname, $points) = @$_;
		$block .= <<EOT;

<LI><B><A HREF="$constants->{rootdir}/comments.pl?sid=$sid&cid=$cid">$subj</A>
	($points points) by $nickname</B> on $d <FONT SIZE="1">attached to
	<A HREF="$constants->{rootdir}/article.pl?sid=$sid">$title</A></FONT>
EOT
	}
	setblock("top10comments", $block);

}



#################################################################
sub getSlashdotPoll {
	setblock("poll", pollbooth("", 1));
}


#################################################################
sub portaldLog {
	my $dir = "$constants->{logdir}";
	unless (-e $dir) {
		mkdir $dir, 0755 or die "Can't mkdir $dir: $!";
	}

	open LOG, ">>$dir/portald.log"
		or die "Can't append to $dir/portald.log: $!";
	select((select(LOG), $|++)[0]);  # unbuffer LOG
	print LOG localtime() . "\t", join("\t", @_), "\n";
	close LOG;
}

=head2 Fortune

The fortune command.

=cut


#################################################################
sub getUptime {
	my $x = `/usr/bin/uptime`;
	$x = "<B>date:</B> $x";
	$x =~ s/up/\n<BR><B>uptime:<\/B>/g;
	$x =~ s/load average:/\n<BR><B>load average:<\/B>/;
	my $ps = `/bin/ps aux | /usr/bin/wc -l`;
	$ps--;
	$x .= "<BR><B>processes:</B> $ps <BR>";

	my $stats = $x;

	my($today,$yesterday) = $slashdb->getAccesLogCountTodayAndYestarday();
	my($th, $tc) = $slashdb->getVar("totalhits", "totalComments");

	$stats .= "<B>yesterday:</B> $yesterday<BR>
		<B>today:</B> $today<BR>
		<B>ever:</B> $th<BR>";

	setblock('uptime', $stats);
}


#################################################################
sub setblock {
	my($bid, $block) = @_;
	$savedBlocks{$bid} = $block;
	portaldLog("updated $bid");
}


#################################################################
sub getRDF {
	#gets an RDF file, and formats it as a /. block

	my($bid, $url, $other) = @_;
	my $rss = new XML::RSS;

	my $d = geturl($url);
	if (!$d) {
		portaldLog("failed to get $bid: $@");
		return;
	}
	$d =~ s/&(?!#?[a-zA-Z0-9]+;)/&amp;/g;

	eval { $rss->parse($d) };

	if ($@) {
		portaldLog("$bid did not parse properly:$@");
		return;
	} else {
		my $str;
		foreach my $item (@{$rss->{items}}) {
			$str .= qq!<LI><A HREF="$item->{'link'}">$item->{title}</A></LI>\n!;
		}
		setblock($bid, "$str$other");
		return 1;
	}
}

#################################################################
sub getSectionMenu2 {
	my $menu = "\n\n<!-- begin section index block -->\n\n";
	my $section_menu = $slashdb->getSectionMenu2();
	for (@$section_menu) {
		my ($s) = $_->[0];
		my ($month, $day, $count) = $slashdb->getSectionMenu2Info($s);

		$menu .= "\n$month/$day" if $month && $day;
		$menu .= " ($count)" if $count > 1;
		$menu .= <<EOT;
<BR>
<B><A HREF="$constants->{rootdir}/index.pl?section=$s">$s</A></B><BR>
EOT
	}
	$menu .= "\n\n<!-- end section index block -->\n\n";

	setblock("sectionindex", $menu);
}


#################################################################
# wow, now it's time to actually do something
makeTmp();

portaldLog("Launching Portald");

$|++;
require 'portald-site' if -e 'portald-site';
portaldLog("Updating Portal Box Thingees");

getSectionMenu2();

# loop through all the RDF sites
my $RDFlist = $slashdb->getSitesRDF();

for (@{$RDFlist}) {
	my($bid, $url, $rdf) = ($_->[0], $_->[1], $_->[2]);
	getRDF($bid, $rdf);
}

getTop10Comments();
setblock("rand", $slashdb->randomBlock());
getSlashdotPoll();
getUptime();

# Clean up
deleteTmp();


foreach (keys %savedBlocks) {
	$slashdb->setBlock($_, { block => $savedBlocks{$_} });
}

# from 'portald-site'
newSemiRandomBlock() if defined &newSemiRandomBlock;

portaldLog("Sucessfully Saved Portals");

__END__
