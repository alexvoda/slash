#!/usr/bin/perl -w 
use strict;
use Slash::DB;

# This is the uber install script.
# -Brian (brian@tangent.org)


my $prefix = "/usr/local/slash";

my (	$user,
			$owner,
			$password,
			$username,
			$realname,
			$email,
			$dbh,
			@create,
			$sql,
			@sql,
			$hostname,
			@directories,
			@binaries,
			$httpd,
			$uname,
			%slash_sites,
			);

my @standard_http = qw (
	PerlModule Apache::SIG
	PerlModule Apache::DBI
	PerlModule Slash::Apache
	PerlModule Slash::Apache::User
	PerlModule Slash::Apache::Log
	PerlAccessHandler Slash::Apache::User
	PerlLogHandler Slash::Apache::Log
	PerlModule CGI
	PerlHandler Apache::Registry
	PerlSetupEnv On
	PerlSetEnv TZ GMT
);
unless ($ARGV[0]) {
	print "You need to give us a DBIx::Password virtual name\n";
	exit 0;
}

eval { require DBIx::Password; };

if($@) {
	print "Doesn't look like you have Bundle::Slash installed.\n";
	print "Run the CPAN tool and install Bundle::Slash.\n";
}

$user = $ARGV[0];

$dbh = DBIx::Password->connect($user);

unless($dbh) {
	print "The virtual user \"$user\" doesn't exist.\n";
	exit 0;
}

open(APXS, "apxs -q SYSCONFDIR |");
($httpd) = <APXS>;
close(APXS);

unless($httpd) {
	print "Ok, we couldn't find apxs so you won't have the option\n";
	print "of us fixing your httpd.conf for you\n";
} else {
	$httpd .= "/httpd.conf";
}

# Defaulting to the only theme at the moment
open(CREATE, "<$prefix/sql/mysql/schema.sql");

while(<CREATE>) {
	chomp;
	next if /^#/;
	next if /^$/;
	next if /^ $/;
	push @create, $_;
}
close (CREATE);

$sql = join '', @create;
@sql = split /;/, $sql;



print "What is name of your slashsite (aka www.slashdot.org)?\n";
$hostname = <STDIN>;
chomp($hostname);
print "What user would you like to run your slashcode site as (nobody is default)?\n";
$owner = <STDIN>;
chomp($owner);
unless($owner) {
	$owner = 'nobody';
}

# We also need to really be determining driver here and 
# picking the right schema. Having it loop through
# the themes directory would give us a list
print "Which theme do you want to use (skipping since we only have one theme)?\n";
my $theme = "$prefix/themes/slashcode";

open(DUMP,"<$theme/sql/mysql/datadump.sql");

while(<DUMP>) {
	next unless /^INSERT/;
	chomp;
	s/(?:www\.)?example\.com/$hostname/g;
	push @sql, $_;
}
close(DUMP);

open(DUMP,"<$theme/sql/mysql/prep.sql");

while(<DUMP>) {
	chomp;
	push @sql, $_;
}
close(DUMP);

for(@sql) {
	next unless $_;
	unless($dbh->do($_)) {
		print "Failed on :$_:\n";
	}
}

print "Ok, I am planning on user $hostname as the unique name for the slashcode site. If this is not ok, you need to fill in something else here. [$hostname]\n";
my $sitename = <STDIN>;
chomp($sitename);
unless($sitename) {
	$sitename = $hostname;
}

$dbh->do("UPDATE vars SET value = '$prefix/$sitename/logs' WHERE name = 'logdir' ");
$dbh->do("UPDATE vars SET value = '$prefix/$sitename/htdocs' WHERE name = 'basedir' ");
$dbh->do("UPDATE vars SET value = '$prefix/$sitename' WHERE name = 'datadir' ");

system("mkdir $prefix/$sitename");
system("mkdir $prefix/$sitename/logs");
system("mkdir $prefix/$sitename/htdocs");
system("mkdir $prefix/$sitename/backups");
system("mkdir $prefix/$sitename/sbin");
system("cp -r $theme/htdocs/* $prefix/$sitename/htdocs");

$dbh->disconnect;

my $slashdb = Slash::DB->new($ARGV[0]);

print "Ok, we need to create an admin account, give us a name (8 characters only please)\n";
$username = <STDIN>;
chomp($username);
print "What is the email address of the account?\n";
$email = <STDIN>;
chomp($email);

my $uid = $slashdb->createUser($username, $email, $username);

print "What is the password for the account?\n";
$password = <STDIN>;
chomp($password);

$slashdb->setUser($uid, {newpasswd => $password, seclev => 10000});

# Now, lets update slash.sites
open (SLASHSITES, "$prefix/slash.sites");
while(<SLASHSITES>) {
	chomp;
	my ($dbuser) = split /:/;
	$slash_sites{$dbuser} = 1;
}
close (SLASHSITES);

unless($slash_sites{$user}) {
	open (SLASHSITES, ">>$prefix/slash.sites");
	print SLASHSITES ("$user:$owner\n");
	close (SLASHSITES);
}

system("chown -R $owner $prefix/");

# Now, lets do the httpd.conf

sub standardadd {
	open(CONF, ">>$httpd");
	for(@standard_http) {
		print CONF ("$_\n");
	}
	close(CONF);
}

sub siteadd {
	open(CONF, ">>$httpd");
	close(CONF);
}



