#!/usr/bin/perl -w 
use strict;
use File::Copy;
use File::Find;
use File::Path;
use Slash::DB;

# This is the uber install script.
# -Brian (brian@tangent.org)

$| = 1;

my $prefix = "/usr/local/slash";
my(	$user, $owner, $owner_id, $group, $group_id, $password,
	$sitename, $username, $realname, $email, $dbh, @create, $sql,
	@sql, $hostname, $hostname_f, $host_noport, $httpd, %slash_sites,
	$driver
);

my %drivers = (
	Pg	=> 'postgresql',
	mysql	=> 'mysql',
	oracle	=> 'oracle'
);

my @standard_http = qw(
	PerlModule Apache::SIG
	PerlModule Apache::DBI
	PerlModule Slash::Apache
	PerlModule Slash::Apache::User
	PerlModule Slash::Apache::Log
	PerlAccessHandler Slash::Apache::User
	PerlLogHandler Slash::Apache::Log
	PerlModule CGI
	PerlHandler Apache::Registry
	PerlSetupEnv On
	PerlSetEnv TZ GMT
);

unless ($ARGV[0]) {
	print "You need to give us a DBIx::Password virtual name.\n";
	exit;
}

unless (DBIx::Password::checkVirtualUser($ARGV[0])) {
	print "You did not supply a valid DBIx::Password virtual name.\n";
	exit;
}

$driver = $drivers{DBIx::Password::getDriver($ARGV[0])};


eval { require DBIx::Password };

if ($@) {
	print "Doesn't look like you have Bundle::Slash installed.\n";
	print "Run the CPAN tool and install Bundle::Slash.\n";
	exit;
}

$user = $ARGV[0];

$dbh = DBIx::Password->connect($user);

unless ($dbh) {
	print "Are you sure the database is up and running?\n";
	exit;
}

END { $dbh->disconnect if $dbh }

chomp($hostname_f = `hostname -f`);
print "\nWhat is hostname of your slash site
(e.g., www.slashdot.org)? [$hostname_f] ";
chomp($hostname = <STDIN>);
$hostname ||= $hostname_f;
($host_noport = $hostname) =~ s/:.+$//;

print "\nWhat user would you like to run your slash site as? [nobody] ";
chomp($owner = <STDIN>);
$owner ||= 'nobody';
$owner_id = getpwnam($owner) or die "$owner is not a valid user name.\n";

print "\nWhat group would you like to run your slash site under? [nobody] ";
chomp($group = <STDIN>);
$group ||= 'nobody';
$group_id = getpwnam($group) or die "$group is not a valid group name.\n";

# We also need to really be determining driver here and 
# picking the right schema. Having it loop through
# the themes directory would give us a list
print "\nWhich theme do you want to use? (Skipping since we only have one theme.)\n";
my $theme = "$prefix/themes/slashcode";

print "\nOK, I am planning on user $host_noport as the unique name
for the slash site.  If this is not ok, you need to fill in
something else here. [$host_noport] ";
chomp($sitename = <STDIN>);
$sitename ||= $host_noport;

print "\nOK, we need to create an admin account;
give us a name (8 characters only please). [$owner] ";
chomp($username = <STDIN>);
$username ||= $owner;

print "\nWhat is the email address of the account? [$username\@$host_noport] ";
chomp($email = <STDIN>);
$email ||= "$owner\@$host_noport";

print "\nWhat is the password for the account? ";
chomp($password = <STDIN>);
die "You need to give us a password.\n" unless $password;

{
	local *STDERR;
	if (open(APXS, 'apxs -q SYSCONFDIR |')) {
		($httpd) = <APXS>;
		close(APXS);
	}
}

unless ($httpd) {
	print "\nOK, we couldn't find apxs so you won't have the option
of us fixing your httpd.conf for you.\n";
} else {
	$httpd .= '/httpd.conf';
}

# Defaulting to the only theme at the moment
open(CREATE, "< $prefix/sql/$driver/schema.sql")
	or die "Can't open $prefix/sql/$driver/schema.sql: $!.\n";
while (<CREATE>) {
	chomp;
	next if /^#/;
	next if /^$/;
	next if /^ $/;
	push @create, $_;
}
close (CREATE);

$sql = join '', @create;
@sql = split /;/, $sql;

open(DUMP,"< $theme/sql/$driver/datadump.sql")
	or die "Can't open $theme/sql/$driver/datadump.sql: $!.\n";
while(<DUMP>) {
	next unless /^INSERT/;
	chomp;
	s/www\.example\.com/$hostname/g;
	s/admin\@example\.com/$email/g;
	push @sql, $_;
}
close(DUMP);

open(DUMP,"< $theme/sql/$driver/prep.sql")
	or die "Can't open $theme/sql/$driver/prep.sql: $!.\n";
while(<DUMP>) {
	chomp;
	push @sql, $_;
}
close(DUMP);

for (@sql) {
	next unless $_;
	unless ($dbh->do($_)) {
		print "Failed on :$_:\n";
	}
}

$dbh->do("UPDATE vars SET value = " . $dbh->quote("$prefix/$sitename/logs") . " WHERE name = 'logdir'");
$dbh->do("UPDATE vars SET value = " . $dbh->quote("$prefix/$sitename/htdocs") . " WHERE name = 'basedir'");
$dbh->do("UPDATE vars SET value = " . $dbh->quote("$prefix/$sitename") . " WHERE name = 'datadir'");
$dbh->do("UPDATE vars SET value = " . $dbh->quote($sitename) . " WHERE name = 'siteid'");
$dbh->disconnect;

mkpath "$prefix/$sitename", 0, 0775;
mkpath "$prefix/$sitename/logs", 0, 0775;
mkpath "$prefix/$sitename/htdocs", 0, 0775;
mkpath "$prefix/$sitename/backups", 0, 0775;
mkpath "$prefix/$sitename/sbin", 0, 0775;
find(sub {
	my $f1 = $File::Find::name;
	(my $f2 = $f1) =~ s|^$theme/htdocs/|$prefix/$sitename/htdocs/|;
	if (-d $f1) {
		mkpath $f2, 0, 0775;
	} else {
		copy $f1, $f2;
		chmod((stat(_))[2], $f2);
	}
}, "$theme/htdocs/");


my $slashdb = Slash::DB->new($ARGV[0]);
my $uid = $slashdb->createUser($username, $email, $username);
$slashdb->setUser($uid, { passwd => $password, seclev => 10000 });

# Now, lets update slash.sites
if (open(SLASHSITES, "< $prefix/slash.sites")) {
	while (<SLASHSITES>) {
		chomp;
		my($dbuser) = split /:/;
		$slash_sites{$dbuser} = 1;
	}
	close(SLASHSITES);
}

unless (exists $slash_sites{$user}) {
	open(SLASHSITES, ">> $prefix/slash.sites")
		or die "Can't append to $prefix/slash.sites: $!.\n";
	print SLASHSITES "$user:$owner\n";
	close(SLASHSITES);
}

find(sub { chown $owner_id, $group_id, $_ }, "$prefix/$sitename");

print "\nDone, thanks.\n";

# Now, lets do the httpd.conf

sub standardadd {
	open(CONF, ">> $httpd");
	for (@standard_http) {
		print CONF "$_\n";
	}
	close(CONF);
}

sub siteadd {
	open(CONF, ">> $httpd");
	close(CONF);
}

__END__
