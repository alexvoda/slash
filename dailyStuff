#!/usr/bin/perl -w

###############################################################################
# dailyStuff - this program runs various housekeeping tasks, sends out the 
# the mailing list, and compiles site statistics report and sends the report 
# to the site admin 
#
# Copyright (C) 1997 Rob "CmdrTaco" Malda
# malda@slashdot.org
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#
#  $constants->d: dailyStuff,v 1.3.2.7 2000/08/25 23:48:46 krow Exp $
###############################################################################
use strict;
use File::Basename;
use File::Path;
use Slash;
use Slash::DB;
use Slash::Utility;

my $virtual_user = @ARGV ? $ARGV[0] : 'slash';
my ($constants, $slashdb) = createEnvironment($virtual_user);

my($total) = $slashdb->sqlSelect("count(*)", "accesslog",
	"to_days(now()) - to_days(ts)=1");

my $c = $slashdb->sqlSelectMany("count(*)","accesslog",
	"to_days(now()) - to_days(ts)=1 GROUP BY host_addr");
my($unique) = $c->rows;
$c->finish;

my($comments) = $slashdb->sqlSelect("count(*)","accesslog",
	"to_days(now()) - to_days(ts)=1 AND op='comments'");

$c = $slashdb->sqlSelectMany("dat,count(*)","accesslog",
	"to_days(now()) - to_days(ts)=1 AND 
	(op='index' OR dat='index')
	GROUP BY dat");

my(%indexes, %articles, %commentviews);

while(my($sect, $cnt) = $c->fetchrow) {
	$indexes{$sect} = $cnt;
}
$c->finish;

$c = $slashdb->sqlSelectMany("dat,count(*),op","accesslog",
	"to_days(now()) - to_days(ts)=1 AND op='article'",
	"GROUP BY dat");

while(my($sid, $cnt) = $c->fetchrow) {
	$articles{$sid} = $cnt;
}
$c->finish;

# clean the key table

my $delete_time = time() - $constants->{formkey_timeframe};
$slashdb->sqlDo("DELETE FROM formkeys WHERE ts < $delete_time");

sub updateStamps {
	my $columns = "uid";
	my $tables = "accesslog";
	my $where = "to_days(now())-to_days(ts)=1 AND uid > 0";
	my $other = "GROUP BY uid";

	my $E = $slashdb->sqlSelectAll($columns, $tables, $where, $other);

	$slashdb->sqlDo("LOCK TABLES users_info WRITE");

	for (@{$E}) {
		my $uid=$_->[0];
		$slashdb->setUser($uid, {-lastaccess=>'now()'});
	}
	$slashdb->sqlDo("UNLOCK TABLES");
}

updateStamps();

$c = $slashdb->sqlSelectMany("dat,count(*)","accesslog",
	"to_days(now()) - to_days(ts)=1 AND op='comments'",
	"GROUP BY dat");
while(my($sid, $cnt) = $c->fetchrow) {
	$commentviews{$sid} = $cnt;
}
$c->finish;

$slashdb->sqlDo("delete from accesslog where date_add(ts,interval 48 hour) < now()");

my $sdTotalHits = $slashdb->getVar("totalhits");

$sdTotalHits = $sdTotalHits + $total;
$slashdb->setVar("totalhits", $sdTotalHits);

my $email = <<EOT;
$constants->{sitename} Stats for yesterday

     total $total
    unique $unique
total hits $sdTotalHits
  homepage $indexes{'index'}
   indexes 
EOT

foreach (keys %indexes) {
	$email .= "\t   $_=$indexes{$_}\n"
}

$email .= "\n-----------------------\n";

foreach my $key (sort { $articles{$b} <=> $articles{$a} } keys %articles) {
	my $value = $articles{$key};

	my($title, $author) = $slashdb->sqlSelect("title,aid", "stories",
		"sid=" . $slashdb->{dbh}->quote($key));

	$email .= "$value\t$key " . substr($title, 0, 30) .
		" by $author\n" if $value > 100;
}

$email .= "\n-----------------------\n";
$email .= `$constants->{datadir}/bin/tailslash today`;
$email .= "\n-----------------------\n";

$slashdb->sqlDo("DELETE from pollvoters");
$slashdb->sqlDo("DELETE from moderatorlog WHERE
	to_days(now()) - to_days(ts) > $constants->{archive_delay} ");
$slashdb->sqlDo("DELETE from metamodlog WHERE
	to_days(now()) - to_days(ts) > $constants->{archive_delay} ");

my $anonymous_coward_uid = getCurrentStatic('anonymous_coward_uid');
my $comlim = $slashdb->getUser($anonymous_coward_uid, 'commentlimit');
$slashdb->setUser($anonymous_coward_uid, { commentlimit => 50000 });
$email .= "Archiving Comments...\n";

# Find all stories over $constants->{archive_delay} days where writestatus != 5
my $columns = "sid,time,section,title";
my $tables = "stories";
my $where = "writestatus<5 AND writestatus >= 0 AND to_days(now()) - to_days(time) > $constants->{archive_delay}";

my $E = $slashdb->sqlSelectAll($columns, $tables, $where); #, $other);

for (@{$E}) {
	my($sid, $date, $section, $title) = ($_->[0], $_->[1], $_->[2], $_->[3]);
	$email.= "archiving: $sid $title \n";
	prog2file("$constants->{basedir}/article.pl sid=$sid\\\&ssi=yes\\\&mode=archive",
		"$constants->{basedir}/$section/$sid"."_F.shtml");

	unlink("$constants->{basedir}/$section/$sid.shtml")
		or warn "Can't unlink $constants->{basedir}/$section/$sid.shtml: $!";
	symlink("$constants->{basedir}/$section/${sid}_F.shtml", "$constants->{basedir}/$section/$sid.shtml")
		or die "Can't symlink $constants->{basedir}/$section/${sid}_F.shtml -> $sid.shtml";
	$slashdb->sqlDo("DELETE FROM comments WHERE sid='$sid'");
	$slashdb->sqlDo("UPDATE stories SET writestatus=10 WHERE sid='$sid'");
}
$slashdb->setUser($anonymous_coward_uid, { commentlimit=>$comlim });

my $delay1 = $constants->{archive_delay} * 2;
my $delay2 = $constants->{archive_delay} * 9;
$constants->{defaultsection} ||= 'articles';

$slashdb->sqlDo("delete from newstories WHERE 
	(section='$constants->{defaultsection}' and to_days(now()) - to_days(time) > $delay1)
	or (to_days(now()) - to_days(time) > $delay2)");

$slashdb->sqlDo("delete from comments where to_days(now()) - to_days(date) > $constants->{archive_delay}");

sub generateDailyMail {
	my $columns = "sid,title,section,aid,tid,date_format(time,\"\%W \%M \%d, \@h:\%i\%p\"),dept";
	my $tables = "stories";
	my $where = "to_days(now()) - to_days(time) = 1 AND displaystatus=0 AND time < now()";
	my $other = " ORDER BY time DESC";

	my $E = $slashdb->sqlSelectAll($columns,$tables,$where,$other);

	my $r = "$constants->{sitename} Daily Headline Mailer\n\n";
	$r .= $slashdb->getBlock("emailsponsor");
	# newlines after advert 
	$r .= "\n\n";

	return unless @$E;
	for (@{$E}) {
		my($sid, $title, $section, $aid, $tid, $time, $dept) = @$_;
		$dept = $constants->{use_dept} ? "\n     from the $dept dept." : "";

		$r .= <<EOT;
$title$dept
     posted by $aid on $time ($tid)
     $constants->{rootdir}/article.pl?sid=$sid
EOT
	}
	return $r;
}

sub mailingList {
	my $p = generateDailyMail() or return;

	my $columns ="realemail,mode,nickname";
	my $tables = "users,users_comments,users_info";
	my $where = "users.uid=users_comments.uid AND users.uid=users_info.uid AND maillist=1";
	my $other = "order by realemail";

	my $E = $slashdb->sqlSelectAll($columns,$tables,$where,$other);

	for (@{$E}) {
		sendEmail($_->[0], "24 Hours of $constants->{sitename} Headlines For $_->[2]", <<EOT);
      $p
      You are getting this message because you subscribed to it.
      If you want to unsubscribe from this, go to $constants->{rootdir}/users.pl
      You can login as $_->[2] and disable the mailing from there.
EOT
	}
}

sub prog2file {
	my($c, $f) = @_;

	my $d = `$c`;
	my $dir = dirname($f);
	mkpath($dir, 0, 0755) unless -e $dir;
	if (length($d) > 0) {
		local *F;
		open F, ">$f" or die "Can't open $f: $!";
		print F $d;
		close F;
		return "1";

	} else {
		return "0";
	}
}

# Send a message to the site admin.
if ($constants->{send_mail} == 1) {
	for (keys %{$constants->{stats_reports}}) {
		sendEmail($_, $constants->{stats_reports}{$_}, $email);
	}
	mailingList();
}

